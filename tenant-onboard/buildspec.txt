---
version: 0.2
phases:
  install:
    commands:
      - curl -sS -o aws-iam-authenticator https://amazon-eks.s3-us-east-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/aws-iam-authenticator
      - curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.24.11/2023-03-17/bin/linux/amd64/kubectl
      - curl --silent --location https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz | tar xz -C .
      - chmod +x ./kubectl ./aws-iam-authenticator
      - export PATH=$PWD/:$PATH
      - apt-get -qq update && apt-get -y -qq install jq
      - curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip 
      - unzip -qq awscliv2.zip 
      - ./aws/install --update
  pre_build:
    commands:
      - export KUBECONFIG=$HOME/.kube/config
  build:
    commands:

  post_build:
    commands:
      - REGION={{AWS_REGION}}
      - APPLICATIONECR={{ACCOUNT_ID}}.dkr.ecr.{{AWS_REGION}}.amazonaws.com/{{APPLICATION}} 
      - ORDERECR={{ACCOUNT_ID}}.dkr.ecr.{{AWS_REGION}}.amazonaws.com/{{ORDER}}
      - PRODUCTECR={{ACCOUNT_ID}}.dkr.ecr.{{AWS_REGION}}.amazonaws.com/{{PRODUCT}}  
      - aws sts get-caller-identity
    #  - CREDENTIALS=$(aws sts assume-role --role-arn $CodeBuildArn --role-session-name codebuild-kubectl --duration-seconds 900)
    #   - CREDENTIALS=$(aws sts assume-role --role-arn arn:aws:iam::{{ACCOUNT_ID}}:role/service-role/codebuild-eks-saas-build-service-role --role-session-name codebuild-kubectl --duration-seconds 900)
    
      - CREDENTIALS=$(aws sts assume-role --role-arn arn:aws:iam::{{ACCOUNT_ID}}:role/{{CLOUD9_ROLE}} --role-session-name codebuild-kubectl --duration-seconds 900)
      - echo "${CREDENTIALS}"
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      - {{EKS_UPDATE_KUBECONFIG}}
      # - aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME} --region {{AWS_REGION}} --role-arn arn:aws:iam::{{ACCOUNT_ID}}:role/cluster-stack-clusterstackMastersRole20F68D4E-X40VXXKQ3PFS
      - cat $HOME/.kube/config
      - kubectl version
      
      - kubectl config view
      #- TenantName=$(aws cloudformation describe-stacks --query 'Stacks[0].Parameters[?ParameterKey==`TenantName`].ParameterValue' --output text)
      
      
      # OnboardingService.java code set Tenant
      - TenantId=$(aws codepipeline list-tags-for-resource --resource-arn  arn:aws:codepipeline:{{AWS_REGION}}:{{ACCOUNT_ID}}:eks-saas-pipeline --query 'tags[?key==`Tenant`].value' --output text)
      - TenantName=$(aws codepipeline list-tags-for-resource --resource-arn  arn:aws:codepipeline:{{AWS_REGION}}:{{ACCOUNT_ID}}:eks-saas-pipeline --query 'tags[?key==`TenantName`].value' --output text)
      #- TenantName=$(aws cloudformation describe-stacks --query 'Stacks[0].Parameters[?ParameterKey==`TenantName`].ParameterValue' --output text)
      - echo "${TenantName}"
      #- TenantId=$(aws cloudformation describe-stacks --query "Stacks[0].Outputs[?OutputKey=='TenantId'].OutputValue" --output text)
      - aws codepipeline tag-resource --resource-arn arn:aws:codepipeline:{{AWS_REGION}}:{{ACCOUNT_ID}}:eks-saas-pipeline --tags key=Tenant,value="" key=TenantName,value=""
      
      - ElbUrl=$(aws ssm get-parameter --name "/saas-boost/boost/LOADBALANCER" | jq -r '.Parameter.Value')

      - UserPoolId=$(aws cloudformation describe-stacks  --query "Stacks[?Outputs[?OutputKey=='TenantName'&&OutputValue=='${TenantName}']].[Outputs[?OutputKey=='CognitoUsersUserPoolId'].OutputValue]" --output text)
      - AppClientId=$(aws cloudformation describe-stacks  --query "Stacks[?Outputs[?OutputKey=='TenantName'&&OutputValue=='${TenantName}']].[Outputs[?OutputKey=='CognitoUsersUserPoolClientId'].OutputValue]" --output text)
      - IamRoleArn=arn:aws:iam::{{ACCOUNT_ID}}:role/saasboost-tenant-dynamodb

      - kubectl create ns ${TenantName}
      
      
      
      - echo "Create Silo Tenant Product table"
      - CREATE_PRODUCT_TABLE=$(aws dynamodb create-table --table-name Products-silo-$TenantName --attribute-definitions AttributeName=tenant_id,AttributeType=S AttributeName=product_id,AttributeType=S --key-schema AttributeName=tenant_id,KeyType=HASH AttributeName=product_id,KeyType=RANGE --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5)
      - PRODUCTTABLE="$(echo ${CREATE_PRODUCT_TABLE} | jq -r '.TableDescription.TableName')"

      - echo "Create Silo Tenant Order table"
      - CREATE_ORDER_TABLE=$(aws dynamodb create-table --table-name Orders-silo-$TenantName --attribute-definitions AttributeName=tenant_id,AttributeType=S AttributeName=order_id,AttributeType=S --key-schema AttributeName=tenant_id,KeyType=HASH AttributeName=order_id,KeyType=RANGE --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5)
      - ORDERTABLE="$(echo ${CREATE_ORDER_TABLE} | jq -r '.TableDescription.TableName')"

      - sed -i -e 's,APPLICATION_ECR_REPO,'$APPLICATIONECR',g' client/web/application/k8s/template.yaml
      - sed -i -e 's,ELB_URL,'$ElbUrl',g' client/web/application/k8s/template.yaml
      - sed -i -e 's,TENANT_PATH,'$TenantName',g' client/web/application/k8s/template.yaml
      - kubectl apply -f client/web/application/k8s/template.yaml -n ${TenantName}
      

      - sed -i -e 's,ORDER_SERVICE_ECR_REPO,'$ORDERECR',g' services/application/apps/order/k8s/template.yaml
      - sed -i -e 's,ELB_URL,'$ElbUrl',g' services/application/apps/order/k8s/template.yaml
      - sed -i -e 's,INSERT_AWS_REGION,'$REGION',g' services/application/apps/order/k8s/template.yaml
      - sed -i -e 's,INSERT_IAM_ROLE_ARN,'$IamRoleArn',g' services/application/apps/order/k8s/template.yaml
      - sed -i -e 's,INSERT_COGNITO_USER_POOL_ID,'$UserPoolId',g' services/application/apps/order/k8s/template.yaml
      - sed -i -e 's,INSERT_COGNITO_CLIENT_ID,'$AppClientId',g' services/application/apps/order/k8s/template.yaml
      - sed -i -e 's,INSERT_COGNITO_REGION,'$REGION',g' services/application/apps/order/k8s/template.yaml
      - sed -i -e 's,INSERT_ORDER_TABLE_NAME,'$ORDERTABLE',g' services/application/apps/order/k8s/template.yaml
      - sed -i -e 's,TENANT_PATH,'$TenantName',g' services/application/apps/order/k8s/template.yaml
      - kubectl apply -f services/application/apps/order/k8s/template.yaml -n ${TenantName}

      - sed -i -e 's,PRODUCT_SERVICE_ECR_REPO,'$PRODUCTECR',g' services/application/apps/product/k8s/template.yaml
      - sed -i -e 's,ELB_URL,'$ElbUrl',g' services/application/apps/product/k8s/template.yaml
      - sed -i -e 's,INSERT_AWS_REGION,'$REGION',g' services/application/apps/product/k8s/template.yaml
      - sed -i -e 's,INSERT_IAM_ROLE_ARN,'$IamRoleArn',g' services/application/apps/product/k8s/template.yaml
      - sed -i -e 's,INSERT_COGNITO_USER_POOL_ID,'$UserPoolId',g' services/application/apps/product/k8s/template.yaml
      - sed -i -e 's,INSERT_COGNITO_CLIENT_ID,'$AppClientId',g' services/application/apps/product/k8s/template.yaml
      - sed -i -e 's,INSERT_COGNITO_REGION,'$REGION',g' services/application/apps/product/k8s/template.yaml
      - sed -i -e 's,INSERT_PRODUCT_TABLE_NAME,'$PRODUCTTABLE',g' services/application/apps/product/k8s/template.yaml
      - sed -i -e 's,TENANT_PATH,'$TenantName',g' services/application/apps/product/k8s/template.yaml
      - kubectl apply -f services/application/apps/product/k8s/template.yaml -n ${TenantName}

     # - chmod +x update-provisioning-status.sh
     # - ./update-provisioning-status.sh $TENANTSTACKTABLE $TenantName
